using UnityEngine;
using UnityEngine.SceneManagement;
using Mirror;

/*
	Documentation: https://mirror-networking.com/docs/Components/NetworkManager.html
	API Reference: https://mirror-networking.com/docs/api/Mirror.NetworkManager.html
*/

public class #SCRIPTNAME# : NetworkManager
{
    #region Unity Callbacks

    public override void OnValidate()
    {
        base.OnValidate();
    }

   
   
   
    public override void Awake()
    {
        base.Awake();
    }

   
   
   
   
    public override void Start()
    {
        base.Start();
    }

   
   
   
    public override void LateUpdate()
    {
        base.LateUpdate();
    }

   
   
   
    public override void OnDestroy()
    {
        base.OnDestroy();
    }

    #endregion

    #region Start & Stop

   
   
   
   
    public override void ConfigureServerFrameRate()
    {
        base.ConfigureServerFrameRate();
    }

   
   
   
    public override void OnApplicationQuit()
    {
        base.OnApplicationQuit();
    }

    #endregion

    #region Scene Management

   
   
   
   
   
    public override void ServerChangeScene(string newSceneName)
    {
        base.ServerChangeScene(newSceneName);
    }

   
   
   
   
   
    public override void OnServerChangeScene(string newSceneName) { }

   
   
   
   
    public override void OnServerSceneChanged(string sceneName) { }

   
   
   
   
   
   
   
    public override void OnClientChangeScene(string newSceneName, SceneOperation sceneOperation, bool customHandling) { }

   
   
   
   
   
    public override void OnClientSceneChanged(NetworkConnection conn)
    {
        base.OnClientSceneChanged(conn);
    }

    #endregion

    #region Server System Callbacks

   
   
   
   
   
    public override void OnServerConnect(NetworkConnection conn) { }

   
   
   
   
   
    public override void OnServerReady(NetworkConnection conn)
    {
        base.OnServerReady(conn);
    }

   
   
   
   
   
    public override void OnServerAddPlayer(NetworkConnection conn)
    {
        base.OnServerAddPlayer(conn);
    }

   
   
   
   
   
    public override void OnServerDisconnect(NetworkConnection conn)
    {
        base.OnServerDisconnect(conn);
    }

    #endregion

    #region Client System Callbacks

   
   
   
   
   
    public override void OnClientConnect(NetworkConnection conn)
    {
        base.OnClientConnect(conn);
    }

   
   
   
   
   
    public override void OnClientDisconnect(NetworkConnection conn)
    {
        base.OnClientDisconnect(conn);
    }

   
   
   
   
   
    public override void OnClientNotReady(NetworkConnection conn) { }

    #endregion

    #region Start & Stop Callbacks

   
   
   

   
   
   
   
    public override void OnStartHost() { }

   
   
   
   
    public override void OnStartServer() { }

   
   
   
    public override void OnStartClient() { }

   
   
   
    public override void OnStopHost() { }

   
   
   
    public override void OnStopServer() { }

   
   
   
    public override void OnStopClient() { }

    #endregion
}
